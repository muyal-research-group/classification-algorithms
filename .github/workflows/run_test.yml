name: UNIT_TEST
  
on:
  pull_request:
    branches: ["main"]
    paths:
      - "classification_algorithms/**"
      - "test/**"
      - "pyproject.toml"
  
  
jobs:  
  build:  
    runs-on: ubuntu-latest  
    strategy:  
      matrix:  
        python-version: ["3.9"]  
    steps:  

      - uses: actions/checkout@v3  
      - name: Set up Python ${{ matrix.python-version }}  
        uses: actions/setup-python@v4  
        with:  
          python-version: ${{ matrix.python-version }}  
      - name: Allow writing to /log
        run: |
            sudo mkdir -p /log
            sudo chown $USER:$USER /log
            sudo chmod 777 /log
            sudo mkdir -p /mictlanx
            sudo chown $USER:$USER /mictlanx
            sudo chmod 777 /mictlanx
            sudo mkdir -p /sink
            sudo chown $USER:$USER /sink
            sudo chmod 777 /sink
            
      - name: Create network axo-net (external)
        run: |
          docker network ls --format '{{.Name}}' | grep -qx 'axo-net' || docker network create axo-net
      - name: Compose up
        run: |
          docker compose -f axo-endpoint.yml up -d
          docker compose -f storage.yml up -d
          docker ps -a
      - name: Wait for endpoint
        shell: bash
        run: |
          for i in {1..60}; do
            if (echo > /dev/tcp/127.0.0.1/16666) 2>/dev/null || (echo > /dev/tcp/127.0.0.1/16667) 2>/dev/null; then
              echo "Endpoint is up"; break
            fi
            echo "waiting... ($i)"; sleep 2
          done

      - name: Test writing
        run: echo "hello world" > /log/test.txt

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH  # Ensure poetry is on PATH

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true  # Optional: keeps `.venv` inside project

      - name: Install Dependencies
        run: poetry install --no-interaction --no-root


      - name: Lint with Ruff  
        run: |  
          pip install ruff  
          ruff check .  
        continue-on-error: true  
        
      - name: Test with pytest  
        run: |  
          poetry run coverage run -m pytest  -v -s  
        env:
          LOG_PATH: log  
      - name: Generate Coverage Report  
        run: |  
          poetry run coverage report -m
